@use 'sass:meta';
@use 'sass:math';
@use 'sass:map';
@use 'variables' as *;

// ===== 간격 계산 함수 =====
@function spacing($multiplier) {
  @return $spacing-4 * $multiplier;
}

// ===== 색상 유틸리티 함수 =====
@function alpha($color, $opacity) {
  @return rgba($color, $opacity);
}

@function lighten-color($color, $amount: 10%) {
  @return lighten($color, $amount);
}

@function darken-color($color, $amount: 10%) {
  @return darken($color, $amount);
}

// ===== 반응형 폰트 크기 함수 =====
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function fluid-font-size($min-size, $max-size, $min-vw: 320px, $max-vw: 1200px) {
  @return calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
}

// ===== Z-Index 관리 함수 =====
$z-indexes: (
  'dropdown': 1000,
  'sticky': 1020,
  'fixed': 1030,
  'modal-backdrop': 1040,
  'modal': 1050,
  'popover': 1060,
  'tooltip': 1070
);

@function z-index($key) {
  @return map.get($z-indexes, $key);
}

// ===== 그리드 계산 함수 =====
@function grid-width($columns, $total-columns: 12, $gap: $spacing-4) {
  @return calc((100% - #{($total-columns - 1) * $gap}) / #{$total-columns} * #{$columns} + #{($columns - 1) * $gap});
}

// ===== 컨테이너 패딩 함수 =====
@function container-padding($breakpoint: 'base') {
  $paddings: (
    'base': $spacing-4,
    'sm': $spacing-6,
    'lg': $spacing-8,
    'xl': $spacing-12
  );
  
  @return map.get($paddings, $breakpoint);
}

// ===== 그림자 강도 함수 =====
@function shadow-level($level) {
  @if $level == 1 { @return $shadow-sm; }
  @if $level == 2 { @return $shadow; }
  @if $level == 3 { @return $shadow-md; }
  @if $level == 4 { @return $shadow-lg; }
  @if $level == 5 { @return $shadow-xl; }
  @if $level == 6 { @return $shadow-2xl; }
  @return $shadow;
}

// ===== 애니메이션 지연 함수 =====
@function stagger-delay($index, $base-delay: 0.1s) {
  @return $base-delay * $index;
}

// ===== 색상 대비 함수 =====
@function contrast-color($background-color, $light-color: $white, $dark-color: $gray-900) {
  $lightness: lightness($background-color);
  
  @if $lightness > 50% {
    @return $dark-color;
  } @else {
    @return $light-color;
  }
}

// ===== 반응형 값 함수 =====
@function responsive-value($mobile, $desktop, $breakpoint: $breakpoint-md) {
  @return clamp(#{$mobile}, #{$mobile} + (#{strip-unit($desktop - $mobile)}) * ((100vw - 320px) / (#{strip-unit($breakpoint)} - 320)), #{$desktop});
}
